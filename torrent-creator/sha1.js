"use strict";
var sha1func;
var sharedMemoryBuffer;
if (typeof WebAssembly !== "undefined") {
    var sha1wasm_1;
    var nothingFunction = function () { };
    var importObject = {
        env: {
            _ZdaPv: nothingFunction,
            _Znaj: nothingFunction,
            memset: nothingFunction
        }
    };
    // this is the byte representation of the assembly compiled from sha1.cpp
    var wasmBytes = new Uint8Array([0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x8A, 0x80, 0x80, 0x80, 0x00, 0x02, 0x60, 0x01, 0x7F, 0x01, 0x7F, 0x60, 0x01, 0x7F, 0x00, 0x02, 0x9A, 0x80, 0x80, 0x80, 0x00, 0x02, 0x03, 0x65, 0x6E, 0x76, 0x06, 0x5F, 0x5A, 0x64, 0x61, 0x50, 0x76, 0x00, 0x01, 0x03, 0x65, 0x6E, 0x76, 0x05, 0x5F, 0x5A, 0x6E, 0x61, 0x6A, 0x00, 0x00, 0x03, 0x82, 0x80, 0x80, 0x80, 0x00, 0x01, 0x01, 0x04, 0x84, 0x80, 0x80, 0x80, 0x00, 0x01, 0x70, 0x00, 0x00, 0x05, 0x83, 0x80, 0x80, 0x80, 0x00, 0x01, 0x00, 0x01, 0x06, 0x81, 0x80, 0x80, 0x80, 0x00, 0x00, 0x07, 0x91, 0x80, 0x80, 0x80, 0x00, 0x02, 0x06, 0x6D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x02, 0x00, 0x04, 0x73, 0x68, 0x61, 0x31, 0x00, 0x02, 0x0A, 0xAB, 0xA6, 0x80, 0x80, 0x00, 0x01, 0xA5, 0xA6, 0x80, 0x80, 0x00, 0x04, 0x02, 0x7E, 0x4F, 0x7F, 0x02, 0x7E, 0x06, 0x7F, 0x41, 0x7F, 0x41, 0x7F, 0x20, 0x00, 0x2D, 0x00, 0x81, 0x80, 0x80, 0x08, 0x41, 0x10, 0x74, 0x20, 0x00, 0x2D, 0x00, 0x80, 0x80, 0x80, 0x08, 0x41, 0x18, 0x74, 0x72, 0x20, 0x00, 0x2D, 0x00, 0x82, 0x80, 0x80, 0x08, 0x41, 0x08, 0x74, 0x72, 0x20, 0x00, 0x2D, 0x00, 0x83, 0x80, 0x80, 0x08, 0x22, 0x16, 0x72, 0x22, 0x58, 0xAC, 0x22, 0x01, 0x42, 0x02, 0x88, 0x22, 0x53, 0x42, 0x0E, 0x20, 0x53, 0x42, 0x01, 0x7C, 0x42, 0x0F, 0x83, 0x7D, 0xA7, 0x22, 0x54, 0x41, 0x10, 0x6A, 0x20, 0x54, 0x20, 0x54, 0x41, 0x00, 0x48, 0x1B, 0x22, 0x15, 0xAC, 0x7C, 0x42, 0x03, 0x7C, 0x22, 0x02, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x83, 0x42, 0x02, 0x86, 0x22, 0x53, 0xA7, 0x20, 0x53, 0x42, 0x20, 0x88, 0xA7, 0x1B, 0x20, 0x02, 0x42, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x56, 0x1B, 0x10, 0x01, 0x21, 0x03, 0x02, 0x40, 0x02, 0x40, 0x20, 0x58, 0x41, 0x7D, 0x6A, 0x22, 0x17, 0x41, 0x01, 0x48, 0x0D, 0x00, 0x20, 0x58, 0x41, 0x7C, 0x6A, 0x41, 0x02, 0x76, 0x22, 0x1B, 0x41, 0x01, 0x6A, 0xAD, 0x21, 0x53, 0x20, 0x00, 0x21, 0x59, 0x20, 0x03, 0x21, 0x57, 0x03, 0x40, 0x20, 0x57, 0x20, 0x59, 0x28, 0x00, 0x00, 0x22, 0x54, 0x41, 0x18, 0x74, 0x20, 0x54, 0x41, 0x08, 0x74, 0x41, 0x80, 0x80, 0xFC, 0x07, 0x71, 0x72, 0x20, 0x54, 0x41, 0x08, 0x76, 0x41, 0x80, 0xFE, 0x03, 0x71, 0x20, 0x54, 0x41, 0x18, 0x76, 0x72, 0x72, 0x36, 0x02, 0x00, 0x20, 0x59, 0x41, 0x04, 0x6A, 0x21, 0x59, 0x20, 0x57, 0x41, 0x04, 0x6A, 0x21, 0x57, 0x20, 0x53, 0x42, 0x7F, 0x7C, 0x22, 0x53, 0x42, 0x00, 0x52, 0x0D, 0x00, 0x0B, 0x20, 0x1B, 0x41, 0x01, 0x6A, 0xAD, 0x21, 0x52, 0x0C, 0x01, 0x0B, 0x42, 0x00, 0x21, 0x52, 0x0B, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x20, 0x16, 0x41, 0x03, 0x71, 0x22, 0x54, 0x41, 0x03, 0x46, 0x0D, 0x00, 0x20, 0x54, 0x41, 0x02, 0x46, 0x0D, 0x01, 0x41, 0x80, 0x80, 0x80, 0x80, 0x78, 0x21, 0x59, 0x20, 0x54, 0x41, 0x01, 0x47, 0x0D, 0x02, 0x20, 0x00, 0x20, 0x58, 0x6A, 0x41, 0x7F, 0x6A, 0x2D, 0x00, 0x00, 0x41, 0x18, 0x74, 0x41, 0x80, 0x80, 0x80, 0x04, 0x72, 0x21, 0x59, 0x0C, 0x02, 0x0B, 0x20, 0x00, 0x20, 0x17, 0x6A, 0x2D, 0x00, 0x00, 0x41, 0x18, 0x74, 0x20, 0x00, 0x20, 0x58, 0x6A, 0x22, 0x54, 0x41, 0x7E, 0x6A, 0x2D, 0x00, 0x00, 0x41, 0x10, 0x74, 0x72, 0x20, 0x54, 0x41, 0x7F, 0x6A, 0x2D, 0x00, 0x00, 0x41, 0x08, 0x74, 0x72, 0x41, 0x80, 0x01, 0x72, 0x21, 0x59, 0x0C, 0x01, 0x0B, 0x20, 0x00, 0x20, 0x58, 0x6A, 0x22, 0x54, 0x41, 0x7E, 0x6A, 0x2D, 0x00, 0x00, 0x41, 0x18, 0x74, 0x20, 0x54, 0x41, 0x7F, 0x6A, 0x2D, 0x00, 0x00, 0x41, 0x10, 0x74, 0x72, 0x41, 0x80, 0x80, 0x02, 0x72, 0x21, 0x59, 0x0B, 0x20, 0x03, 0x20, 0x52, 0xA7, 0x41, 0x02, 0x74, 0x6A, 0x20, 0x59, 0x36, 0x02, 0x00, 0x20, 0x52, 0x42, 0x02, 0x7C, 0x21, 0x53, 0x20, 0x52, 0x42, 0x01, 0x7C, 0xA7, 0x21, 0x54, 0x02, 0x40, 0x20, 0x15, 0x41, 0x01, 0x48, 0x0D, 0x00, 0x20, 0x15, 0x20, 0x53, 0xA7, 0x6A, 0x22, 0x57, 0x41, 0x01, 0x6A, 0x20, 0x52, 0x42, 0x03, 0x7C, 0xA7, 0x6B, 0x21, 0x59, 0x20, 0x52, 0x20, 0x15, 0x41, 0x7F, 0x6A, 0xAD, 0x7C, 0x21, 0x52, 0x03, 0x40, 0x20, 0x03, 0x20, 0x54, 0x41, 0x02, 0x74, 0x6A, 0x41, 0x00, 0x36, 0x02, 0x00, 0x20, 0x53, 0xA7, 0x21, 0x54, 0x20, 0x53, 0x42, 0x01, 0x7C, 0x21, 0x53, 0x20, 0x59, 0x41, 0x7F, 0x6A, 0x22, 0x59, 0x0D, 0x00, 0x0B, 0x20, 0x57, 0x41, 0x7F, 0x6A, 0x21, 0x54, 0x20, 0x52, 0x42, 0x03, 0x7C, 0x21, 0x53, 0x0B, 0x20, 0x03, 0x20, 0x54, 0x41, 0x02, 0x74, 0x6A, 0x20, 0x01, 0x42, 0x1D, 0x88, 0x3E, 0x02, 0x00, 0x20, 0x03, 0x20, 0x53, 0xA7, 0x41, 0x02, 0x74, 0x6A, 0x20, 0x58, 0x41, 0x03, 0x74, 0x36, 0x02, 0x00, 0x02, 0x40, 0x02, 0x40, 0x20, 0x02, 0x50, 0x0D, 0x00, 0x20, 0x03, 0x41, 0x3C, 0x6A, 0x21, 0x54, 0x41, 0xF0, 0xC3, 0xCB, 0x9E, 0x7C, 0x21, 0x55, 0x41, 0xF6, 0xA8, 0xC9, 0x81, 0x01, 0x21, 0x56, 0x41, 0xFE, 0xB9, 0xEB, 0xC5, 0x79, 0x21, 0x57, 0x41, 0x89, 0xD7, 0xB6, 0xFE, 0x7E, 0x21, 0x58, 0x41, 0x81, 0xC6, 0x94, 0xBA, 0x06, 0x21, 0x59, 0x42, 0x00, 0x21, 0x53, 0x03, 0x40, 0x20, 0x59, 0x20, 0x54, 0x41, 0x68, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x0F, 0x20, 0x54, 0x41, 0x60, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x0D, 0x73, 0x20, 0x54, 0x28, 0x02, 0x00, 0x22, 0x15, 0x73, 0x20, 0x54, 0x41, 0x5C, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x0E, 0x20, 0x54, 0x41, 0x54, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x0C, 0x73, 0x20, 0x54, 0x41, 0x74, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x14, 0x73, 0x20, 0x54, 0x41, 0x50, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x06, 0x20, 0x54, 0x41, 0x48, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x09, 0x73, 0x20, 0x0F, 0x73, 0x20, 0x54, 0x41, 0x7C, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x16, 0x73, 0x41, 0x01, 0x77, 0x22, 0x17, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1B, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1D, 0x20, 0x0D, 0x20, 0x54, 0x41, 0x58, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x0B, 0x73, 0x20, 0x54, 0x41, 0x78, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x13, 0x73, 0x20, 0x0C, 0x20, 0x54, 0x41, 0x4C, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x07, 0x73, 0x20, 0x54, 0x41, 0x6C, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x12, 0x73, 0x20, 0x15, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1A, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1C, 0x73, 0x20, 0x15, 0x20, 0x13, 0x73, 0x20, 0x1C, 0x73, 0x20, 0x14, 0x20, 0x12, 0x73, 0x20, 0x1A, 0x73, 0x20, 0x1D, 0x73, 0x41, 0x01, 0x77, 0x22, 0x22, 0x73, 0x41, 0x01, 0x77, 0x22, 0x24, 0x73, 0x20, 0x1B, 0x20, 0x1A, 0x73, 0x20, 0x22, 0x73, 0x20, 0x17, 0x20, 0x15, 0x73, 0x20, 0x1D, 0x73, 0x20, 0x16, 0x20, 0x14, 0x73, 0x20, 0x1B, 0x73, 0x20, 0x54, 0x41, 0x70, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x11, 0x20, 0x0F, 0x73, 0x20, 0x17, 0x73, 0x20, 0x54, 0x41, 0x64, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x10, 0x20, 0x0E, 0x73, 0x20, 0x16, 0x73, 0x20, 0x0B, 0x20, 0x06, 0x73, 0x20, 0x11, 0x73, 0x20, 0x07, 0x20, 0x54, 0x41, 0x44, 0x6A, 0x28, 0x02, 0x00, 0x22, 0x0A, 0x73, 0x20, 0x10, 0x73, 0x20, 0x13, 0x73, 0x41, 0x01, 0x77, 0x22, 0x18, 0x73, 0x41, 0x01, 0x77, 0x22, 0x19, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1E, 0x73, 0x41, 0x01, 0x77, 0x22, 0x20, 0x73, 0x41, 0x01, 0x77, 0x22, 0x23, 0x73, 0x41, 0x01, 0x77, 0x22, 0x25, 0x73, 0x41, 0x01, 0x77, 0x22, 0x2A, 0x73, 0x41, 0x01, 0x77, 0x22, 0x2C, 0x20, 0x1C, 0x20, 0x19, 0x73, 0x20, 0x13, 0x20, 0x11, 0x73, 0x20, 0x19, 0x73, 0x20, 0x12, 0x20, 0x10, 0x73, 0x20, 0x18, 0x73, 0x20, 0x1C, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1F, 0x73, 0x41, 0x01, 0x77, 0x22, 0x21, 0x73, 0x20, 0x1A, 0x20, 0x18, 0x73, 0x20, 0x1F, 0x73, 0x20, 0x24, 0x73, 0x41, 0x01, 0x77, 0x22, 0x27, 0x73, 0x41, 0x01, 0x77, 0x22, 0x29, 0x73, 0x20, 0x24, 0x20, 0x21, 0x73, 0x20, 0x29, 0x73, 0x20, 0x22, 0x20, 0x1F, 0x73, 0x20, 0x27, 0x73, 0x20, 0x2C, 0x73, 0x41, 0x01, 0x77, 0x22, 0x2F, 0x73, 0x41, 0x01, 0x77, 0x22, 0x31, 0x73, 0x20, 0x2A, 0x20, 0x27, 0x73, 0x20, 0x2F, 0x73, 0x20, 0x25, 0x20, 0x24, 0x73, 0x20, 0x2C, 0x73, 0x20, 0x23, 0x20, 0x22, 0x73, 0x20, 0x2A, 0x73, 0x20, 0x20, 0x20, 0x1D, 0x73, 0x20, 0x25, 0x73, 0x20, 0x1E, 0x20, 0x1B, 0x73, 0x20, 0x23, 0x73, 0x20, 0x19, 0x20, 0x17, 0x73, 0x20, 0x20, 0x73, 0x20, 0x18, 0x20, 0x16, 0x73, 0x20, 0x1E, 0x73, 0x20, 0x21, 0x73, 0x41, 0x01, 0x77, 0x22, 0x26, 0x73, 0x41, 0x01, 0x77, 0x22, 0x28, 0x73, 0x41, 0x01, 0x77, 0x22, 0x2B, 0x73, 0x41, 0x01, 0x77, 0x22, 0x2D, 0x73, 0x41, 0x01, 0x77, 0x22, 0x32, 0x73, 0x41, 0x01, 0x77, 0x22, 0x34, 0x73, 0x41, 0x01, 0x77, 0x22, 0x37, 0x73, 0x41, 0x01, 0x77, 0x22, 0x39, 0x20, 0x29, 0x20, 0x28, 0x73, 0x20, 0x21, 0x20, 0x20, 0x73, 0x20, 0x28, 0x73, 0x20, 0x1F, 0x20, 0x1E, 0x73, 0x20, 0x26, 0x73, 0x20, 0x29, 0x73, 0x41, 0x01, 0x77, 0x22, 0x2E, 0x73, 0x41, 0x01, 0x77, 0x22, 0x30, 0x73, 0x20, 0x27, 0x20, 0x26, 0x73, 0x20, 0x2E, 0x73, 0x20, 0x31, 0x73, 0x41, 0x01, 0x77, 0x22, 0x36, 0x73, 0x41, 0x01, 0x77, 0x22, 0x38, 0x73, 0x20, 0x31, 0x20, 0x30, 0x73, 0x20, 0x38, 0x73, 0x20, 0x2F, 0x20, 0x2E, 0x73, 0x20, 0x36, 0x73, 0x20, 0x39, 0x73, 0x41, 0x01, 0x77, 0x22, 0x3E, 0x73, 0x41, 0x01, 0x77, 0x22, 0x40, 0x73, 0x20, 0x37, 0x20, 0x36, 0x73, 0x20, 0x3E, 0x73, 0x20, 0x34, 0x20, 0x31, 0x73, 0x20, 0x39, 0x73, 0x20, 0x32, 0x20, 0x2F, 0x73, 0x20, 0x37, 0x73, 0x20, 0x2D, 0x20, 0x2C, 0x73, 0x20, 0x34, 0x73, 0x20, 0x2B, 0x20, 0x2A, 0x73, 0x20, 0x32, 0x73, 0x20, 0x28, 0x20, 0x25, 0x73, 0x20, 0x2D, 0x73, 0x20, 0x26, 0x20, 0x23, 0x73, 0x20, 0x2B, 0x73, 0x20, 0x30, 0x73, 0x41, 0x01, 0x77, 0x22, 0x33, 0x73, 0x41, 0x01, 0x77, 0x22, 0x35, 0x73, 0x41, 0x01, 0x77, 0x22, 0x3A, 0x73, 0x41, 0x01, 0x77, 0x22, 0x3C, 0x73, 0x41, 0x01, 0x77, 0x22, 0x3F, 0x73, 0x41, 0x01, 0x77, 0x22, 0x41, 0x73, 0x41, 0x01, 0x77, 0x22, 0x46, 0x73, 0x41, 0x01, 0x77, 0x22, 0x48, 0x20, 0x38, 0x20, 0x35, 0x73, 0x20, 0x30, 0x20, 0x2D, 0x73, 0x20, 0x35, 0x73, 0x20, 0x2E, 0x20, 0x2B, 0x73, 0x20, 0x33, 0x73, 0x20, 0x38, 0x73, 0x41, 0x01, 0x77, 0x22, 0x3B, 0x73, 0x41, 0x01, 0x77, 0x22, 0x3D, 0x73, 0x20, 0x36, 0x20, 0x33, 0x73, 0x20, 0x3B, 0x73, 0x20, 0x40, 0x73, 0x41, 0x01, 0x77, 0x22, 0x43, 0x73, 0x41, 0x01, 0x77, 0x22, 0x45, 0x73, 0x20, 0x40, 0x20, 0x3D, 0x73, 0x20, 0x45, 0x73, 0x20, 0x3E, 0x20, 0x3B, 0x73, 0x20, 0x43, 0x73, 0x20, 0x48, 0x73, 0x41, 0x01, 0x77, 0x22, 0x4B, 0x73, 0x41, 0x01, 0x77, 0x22, 0x4D, 0x73, 0x20, 0x46, 0x20, 0x43, 0x73, 0x20, 0x4B, 0x73, 0x20, 0x41, 0x20, 0x40, 0x73, 0x20, 0x48, 0x73, 0x20, 0x3F, 0x20, 0x3E, 0x73, 0x20, 0x46, 0x73, 0x20, 0x3C, 0x20, 0x39, 0x73, 0x20, 0x41, 0x73, 0x20, 0x3A, 0x20, 0x37, 0x73, 0x20, 0x3F, 0x73, 0x20, 0x35, 0x20, 0x34, 0x73, 0x20, 0x3C, 0x73, 0x20, 0x33, 0x20, 0x32, 0x73, 0x20, 0x3A, 0x73, 0x20, 0x3D, 0x73, 0x41, 0x01, 0x77, 0x22, 0x42, 0x73, 0x41, 0x01, 0x77, 0x22, 0x44, 0x73, 0x41, 0x01, 0x77, 0x22, 0x47, 0x73, 0x41, 0x01, 0x77, 0x22, 0x49, 0x73, 0x41, 0x01, 0x77, 0x22, 0x4E, 0x73, 0x41, 0x01, 0x77, 0x22, 0x4F, 0x73, 0x41, 0x01, 0x77, 0x22, 0x51, 0x73, 0x41, 0x01, 0x77, 0x6A, 0x20, 0x43, 0x20, 0x42, 0x73, 0x20, 0x3B, 0x20, 0x3A, 0x73, 0x20, 0x42, 0x73, 0x20, 0x45, 0x73, 0x41, 0x01, 0x77, 0x22, 0x4A, 0x73, 0x20, 0x4D, 0x73, 0x41, 0x01, 0x77, 0x22, 0x50, 0x20, 0x3D, 0x20, 0x3C, 0x73, 0x20, 0x44, 0x73, 0x20, 0x4A, 0x73, 0x41, 0x01, 0x77, 0x22, 0x4C, 0x20, 0x47, 0x20, 0x41, 0x20, 0x3E, 0x20, 0x38, 0x20, 0x33, 0x20, 0x2D, 0x20, 0x2A, 0x20, 0x24, 0x20, 0x1F, 0x20, 0x19, 0x20, 0x0C, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x05, 0x6A, 0x20, 0x07, 0x20, 0x57, 0x6A, 0x20, 0x58, 0x20, 0x57, 0x71, 0x20, 0x56, 0x20, 0x58, 0x41, 0x7F, 0x73, 0x71, 0x72, 0x20, 0x55, 0x6A, 0x20, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x20, 0x0A, 0x6A, 0x22, 0x07, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x0C, 0x20, 0x05, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x07, 0x6B, 0x20, 0x58, 0x41, 0x1E, 0x77, 0x22, 0x07, 0x71, 0x72, 0x6A, 0x20, 0x07, 0x20, 0x59, 0x71, 0x20, 0x57, 0x20, 0x59, 0x41, 0x7F, 0x73, 0x71, 0x72, 0x20, 0x56, 0x6A, 0x20, 0x09, 0x6A, 0x20, 0x0C, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x04, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x08, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x09, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x0A, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x08, 0x6B, 0x20, 0x0C, 0x41, 0x1E, 0x77, 0x22, 0x0C, 0x71, 0x72, 0x6A, 0x20, 0x06, 0x20, 0x07, 0x6A, 0x20, 0x59, 0x20, 0x0C, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x04, 0x6B, 0x20, 0x05, 0x71, 0x72, 0x6A, 0x20, 0x09, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x05, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x04, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x06, 0x41, 0x1E, 0x77, 0x22, 0x07, 0x20, 0x0F, 0x6A, 0x20, 0x09, 0x41, 0x1E, 0x77, 0x22, 0x0F, 0x20, 0x0D, 0x6A, 0x20, 0x0B, 0x20, 0x0C, 0x6A, 0x20, 0x59, 0x20, 0x0F, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x05, 0x6B, 0x20, 0x0A, 0x71, 0x72, 0x6A, 0x20, 0x06, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x0C, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x0D, 0x20, 0x07, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x0C, 0x6B, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x71, 0x72, 0x6A, 0x20, 0x0A, 0x20, 0x0E, 0x6A, 0x20, 0x06, 0x20, 0x59, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x04, 0x6B, 0x20, 0x0F, 0x71, 0x72, 0x6A, 0x20, 0x0D, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x06, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x0F, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x0B, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x0E, 0x20, 0x0F, 0x41, 0x1E, 0x77, 0x22, 0x0C, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x0B, 0x6B, 0x20, 0x0D, 0x41, 0x1E, 0x77, 0x22, 0x0D, 0x71, 0x72, 0x6A, 0x20, 0x59, 0x20, 0x10, 0x6A, 0x20, 0x0F, 0x20, 0x0D, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x06, 0x6B, 0x20, 0x07, 0x71, 0x72, 0x6A, 0x20, 0x0E, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x06, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x0B, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x0F, 0x41, 0x1E, 0x77, 0x22, 0x10, 0x20, 0x16, 0x6A, 0x20, 0x0E, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x20, 0x14, 0x6A, 0x20, 0x0D, 0x20, 0x12, 0x6A, 0x20, 0x59, 0x20, 0x16, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x06, 0x6B, 0x20, 0x0C, 0x71, 0x72, 0x6A, 0x20, 0x0F, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x12, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x14, 0x20, 0x10, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x12, 0x6B, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x71, 0x72, 0x6A, 0x20, 0x0C, 0x20, 0x11, 0x6A, 0x20, 0x0F, 0x20, 0x59, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x0B, 0x6B, 0x20, 0x16, 0x71, 0x72, 0x6A, 0x20, 0x14, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x11, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x0D, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x0F, 0x20, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x12, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x0D, 0x6B, 0x20, 0x14, 0x41, 0x1E, 0x77, 0x22, 0x14, 0x71, 0x72, 0x6A, 0x20, 0x59, 0x20, 0x13, 0x6A, 0x20, 0x16, 0x20, 0x14, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x11, 0x6B, 0x20, 0x10, 0x71, 0x72, 0x6A, 0x20, 0x0F, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x11, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x10, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x6A, 0x20, 0x0F, 0x41, 0x1E, 0x77, 0x22, 0x19, 0x20, 0x17, 0x6A, 0x20, 0x14, 0x20, 0x15, 0x6A, 0x20, 0x59, 0x20, 0x19, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x11, 0x6B, 0x20, 0x12, 0x71, 0x72, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x17, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x15, 0x20, 0x13, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x17, 0x6B, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x71, 0x72, 0x6A, 0x20, 0x12, 0x20, 0x18, 0x6A, 0x20, 0x16, 0x20, 0x59, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x10, 0x6B, 0x20, 0x19, 0x71, 0x72, 0x6A, 0x20, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x19, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x22, 0x0F, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x17, 0x20, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x18, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x0F, 0x6B, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x15, 0x71, 0x72, 0x6A, 0x20, 0x1A, 0x20, 0x59, 0x6A, 0x20, 0x16, 0x20, 0x15, 0x71, 0x41, 0xE6, 0x8C, 0xF6, 0xAB, 0x7A, 0x20, 0x19, 0x6B, 0x20, 0x13, 0x71, 0x72, 0x6A, 0x20, 0x17, 0x41, 0x05, 0x77, 0x6A, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0x99, 0xF3, 0x89, 0xD4, 0x05, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x6A, 0x20, 0x1C, 0x20, 0x18, 0x6A, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x1A, 0x20, 0x17, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x1B, 0x20, 0x15, 0x6A, 0x20, 0x17, 0x20, 0x18, 0x73, 0x20, 0x59, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x73, 0x20, 0x1E, 0x20, 0x17, 0x6A, 0x20, 0x13, 0x20, 0x1A, 0x73, 0x20, 0x59, 0x73, 0x6A, 0x20, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x59, 0x73, 0x6A, 0x20, 0x1D, 0x20, 0x1A, 0x6A, 0x20, 0x1B, 0x20, 0x13, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x17, 0x41, 0x1E, 0x77, 0x22, 0x1D, 0x6A, 0x20, 0x22, 0x20, 0x16, 0x6A, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x73, 0x20, 0x17, 0x73, 0x6A, 0x20, 0x20, 0x20, 0x1B, 0x6A, 0x20, 0x59, 0x20, 0x16, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x17, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x73, 0x20, 0x21, 0x20, 0x59, 0x6A, 0x20, 0x1D, 0x20, 0x13, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x59, 0x73, 0x6A, 0x20, 0x23, 0x20, 0x13, 0x6A, 0x20, 0x1B, 0x20, 0x1D, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x1D, 0x6A, 0x20, 0x25, 0x20, 0x17, 0x6A, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x26, 0x20, 0x1B, 0x6A, 0x20, 0x59, 0x20, 0x17, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x73, 0x20, 0x27, 0x20, 0x59, 0x6A, 0x20, 0x1D, 0x20, 0x13, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x59, 0x73, 0x6A, 0x20, 0x28, 0x20, 0x13, 0x6A, 0x20, 0x1B, 0x20, 0x1D, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x1D, 0x6A, 0x20, 0x2B, 0x20, 0x17, 0x6A, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x29, 0x20, 0x1B, 0x6A, 0x20, 0x59, 0x20, 0x17, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x73, 0x20, 0x2C, 0x20, 0x59, 0x6A, 0x20, 0x1D, 0x20, 0x13, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x15, 0x73, 0x6A, 0x20, 0x2E, 0x20, 0x13, 0x6A, 0x20, 0x1B, 0x20, 0x1D, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xA1, 0xD7, 0xE7, 0xF6, 0x06, 0x6A, 0x22, 0x1D, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x6A, 0x20, 0x32, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x15, 0x6A, 0x20, 0x2F, 0x20, 0x1B, 0x6A, 0x20, 0x16, 0x20, 0x15, 0x20, 0x17, 0x72, 0x71, 0x20, 0x15, 0x20, 0x17, 0x71, 0x72, 0x6A, 0x20, 0x1D, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1B, 0x20, 0x59, 0x20, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x72, 0x71, 0x20, 0x59, 0x20, 0x16, 0x71, 0x72, 0x6A, 0x20, 0x30, 0x20, 0x17, 0x6A, 0x20, 0x1D, 0x20, 0x16, 0x20, 0x15, 0x72, 0x71, 0x20, 0x16, 0x20, 0x15, 0x71, 0x72, 0x6A, 0x20, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1D, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x13, 0x20, 0x1D, 0x41, 0x1E, 0x77, 0x22, 0x15, 0x20, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x72, 0x71, 0x20, 0x15, 0x20, 0x17, 0x71, 0x72, 0x6A, 0x20, 0x31, 0x20, 0x16, 0x6A, 0x20, 0x1D, 0x20, 0x17, 0x20, 0x59, 0x72, 0x71, 0x20, 0x17, 0x20, 0x59, 0x71, 0x72, 0x6A, 0x20, 0x13, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1D, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x6A, 0x20, 0x35, 0x20, 0x13, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x6A, 0x20, 0x34, 0x20, 0x17, 0x6A, 0x20, 0x1B, 0x20, 0x16, 0x20, 0x15, 0x72, 0x71, 0x20, 0x16, 0x20, 0x15, 0x71, 0x72, 0x6A, 0x20, 0x1D, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x13, 0x20, 0x59, 0x20, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x72, 0x71, 0x20, 0x59, 0x20, 0x17, 0x71, 0x72, 0x6A, 0x20, 0x36, 0x20, 0x15, 0x6A, 0x20, 0x1D, 0x20, 0x17, 0x20, 0x16, 0x72, 0x71, 0x20, 0x17, 0x20, 0x16, 0x71, 0x72, 0x6A, 0x20, 0x13, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1D, 0x20, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x15, 0x20, 0x13, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x72, 0x71, 0x20, 0x15, 0x20, 0x16, 0x71, 0x72, 0x6A, 0x20, 0x37, 0x20, 0x17, 0x6A, 0x20, 0x1B, 0x20, 0x16, 0x20, 0x59, 0x72, 0x71, 0x20, 0x16, 0x20, 0x59, 0x71, 0x72, 0x6A, 0x20, 0x1D, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x13, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x6A, 0x20, 0x3B, 0x20, 0x1D, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x6A, 0x20, 0x3A, 0x20, 0x16, 0x6A, 0x20, 0x1B, 0x20, 0x17, 0x20, 0x15, 0x72, 0x71, 0x20, 0x17, 0x20, 0x15, 0x71, 0x72, 0x6A, 0x20, 0x13, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1D, 0x20, 0x59, 0x20, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x72, 0x71, 0x20, 0x59, 0x20, 0x16, 0x71, 0x72, 0x6A, 0x20, 0x39, 0x20, 0x15, 0x6A, 0x20, 0x13, 0x20, 0x16, 0x20, 0x17, 0x72, 0x71, 0x20, 0x16, 0x20, 0x17, 0x71, 0x72, 0x6A, 0x20, 0x1D, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x13, 0x20, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x15, 0x20, 0x1D, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x72, 0x71, 0x20, 0x15, 0x20, 0x17, 0x71, 0x72, 0x6A, 0x20, 0x3C, 0x20, 0x16, 0x6A, 0x20, 0x1B, 0x20, 0x17, 0x20, 0x59, 0x72, 0x71, 0x20, 0x17, 0x20, 0x59, 0x71, 0x72, 0x6A, 0x20, 0x13, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1D, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x6A, 0x20, 0x40, 0x20, 0x13, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x6A, 0x20, 0x3D, 0x20, 0x17, 0x6A, 0x20, 0x1B, 0x20, 0x16, 0x20, 0x15, 0x72, 0x71, 0x20, 0x16, 0x20, 0x15, 0x71, 0x72, 0x6A, 0x20, 0x1D, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x13, 0x20, 0x59, 0x20, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x72, 0x71, 0x20, 0x59, 0x20, 0x17, 0x71, 0x72, 0x6A, 0x20, 0x3F, 0x20, 0x15, 0x6A, 0x20, 0x1D, 0x20, 0x17, 0x20, 0x16, 0x72, 0x71, 0x20, 0x17, 0x20, 0x16, 0x71, 0x72, 0x6A, 0x20, 0x13, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x1D, 0x20, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x20, 0x13, 0x41, 0x1E, 0x77, 0x22, 0x15, 0x72, 0x71, 0x20, 0x16, 0x20, 0x15, 0x71, 0x72, 0x6A, 0x20, 0x42, 0x20, 0x17, 0x6A, 0x20, 0x1B, 0x20, 0x15, 0x20, 0x59, 0x72, 0x71, 0x20, 0x15, 0x20, 0x59, 0x71, 0x72, 0x6A, 0x20, 0x1D, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xDC, 0xF9, 0xEE, 0xF8, 0x78, 0x6A, 0x22, 0x17, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x6A, 0x20, 0x44, 0x20, 0x16, 0x6A, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x20, 0x1D, 0x41, 0x1E, 0x77, 0x22, 0x1D, 0x73, 0x20, 0x17, 0x73, 0x6A, 0x20, 0x43, 0x20, 0x15, 0x6A, 0x20, 0x1D, 0x20, 0x16, 0x73, 0x20, 0x59, 0x73, 0x6A, 0x20, 0x17, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x16, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x73, 0x20, 0x46, 0x20, 0x1D, 0x6A, 0x20, 0x1B, 0x20, 0x13, 0x73, 0x20, 0x59, 0x73, 0x6A, 0x20, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x59, 0x73, 0x6A, 0x20, 0x45, 0x20, 0x13, 0x6A, 0x20, 0x17, 0x20, 0x1B, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x1B, 0x41, 0x1E, 0x77, 0x22, 0x1D, 0x6A, 0x20, 0x4A, 0x20, 0x16, 0x6A, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x73, 0x20, 0x1B, 0x73, 0x6A, 0x20, 0x48, 0x20, 0x17, 0x6A, 0x20, 0x59, 0x20, 0x16, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x1B, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x73, 0x20, 0x49, 0x20, 0x59, 0x6A, 0x20, 0x1D, 0x20, 0x13, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x59, 0x73, 0x6A, 0x20, 0x4B, 0x20, 0x13, 0x6A, 0x20, 0x1B, 0x20, 0x1D, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x1D, 0x6A, 0x20, 0x4D, 0x20, 0x17, 0x6A, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x4E, 0x20, 0x1B, 0x6A, 0x20, 0x59, 0x20, 0x17, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x73, 0x20, 0x42, 0x20, 0x3F, 0x73, 0x20, 0x47, 0x73, 0x20, 0x4C, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1A, 0x20, 0x59, 0x6A, 0x20, 0x1D, 0x20, 0x13, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x59, 0x73, 0x6A, 0x20, 0x4F, 0x20, 0x13, 0x6A, 0x20, 0x1B, 0x20, 0x1D, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x59, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x1D, 0x6A, 0x20, 0x51, 0x20, 0x17, 0x6A, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x13, 0x20, 0x59, 0x41, 0x1E, 0x77, 0x22, 0x59, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x44, 0x20, 0x41, 0x73, 0x20, 0x49, 0x73, 0x20, 0x1A, 0x73, 0x41, 0x01, 0x77, 0x22, 0x1A, 0x20, 0x1B, 0x6A, 0x20, 0x59, 0x20, 0x17, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x16, 0x41, 0x1E, 0x77, 0x22, 0x1B, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x22, 0x17, 0x73, 0x20, 0x45, 0x20, 0x44, 0x73, 0x20, 0x4C, 0x73, 0x20, 0x50, 0x73, 0x41, 0x01, 0x77, 0x20, 0x59, 0x6A, 0x20, 0x1D, 0x20, 0x13, 0x73, 0x20, 0x15, 0x73, 0x6A, 0x20, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x15, 0x73, 0x6A, 0x20, 0x47, 0x20, 0x46, 0x73, 0x20, 0x4E, 0x73, 0x20, 0x1A, 0x73, 0x41, 0x01, 0x77, 0x20, 0x13, 0x6A, 0x20, 0x17, 0x20, 0x1D, 0x73, 0x20, 0x16, 0x73, 0x6A, 0x20, 0x15, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x22, 0x16, 0x41, 0x05, 0x77, 0x6A, 0x41, 0xD6, 0x83, 0x8B, 0xD3, 0x7C, 0x6A, 0x21, 0x59, 0x20, 0x16, 0x20, 0x58, 0x6A, 0x21, 0x58, 0x20, 0x15, 0x41, 0x1E, 0x77, 0x20, 0x57, 0x6A, 0x21, 0x57, 0x20, 0x17, 0x20, 0x55, 0x6A, 0x21, 0x55, 0x20, 0x1B, 0x20, 0x56, 0x6A, 0x21, 0x56, 0x20, 0x54, 0x41, 0xC0, 0x00, 0x6A, 0x21, 0x54, 0x20, 0x53, 0x42, 0x10, 0x7C, 0x22, 0x53, 0x20, 0x02, 0x54, 0x0D, 0x00, 0x0C, 0x02, 0x0B, 0x0B, 0x41, 0x81, 0xC6, 0x94, 0xBA, 0x06, 0x21, 0x59, 0x41, 0x89, 0xD7, 0xB6, 0xFE, 0x7E, 0x21, 0x58, 0x41, 0xFE, 0xB9, 0xEB, 0xC5, 0x79, 0x21, 0x57, 0x41, 0xF6, 0xA8, 0xC9, 0x81, 0x01, 0x21, 0x56, 0x41, 0xF0, 0xC3, 0xCB, 0x9E, 0x7C, 0x21, 0x55, 0x0B, 0x20, 0x03, 0x10, 0x00, 0x20, 0x00, 0x20, 0x59, 0x41, 0x10, 0x76, 0x3A, 0x00, 0x85, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x59, 0x41, 0x18, 0x76, 0x3A, 0x00, 0x84, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x59, 0x41, 0x08, 0x76, 0x3A, 0x00, 0x86, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x59, 0x3A, 0x00, 0x87, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x58, 0x41, 0x18, 0x76, 0x3A, 0x00, 0x88, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x58, 0x41, 0x10, 0x76, 0x3A, 0x00, 0x89, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x58, 0x41, 0x08, 0x76, 0x3A, 0x00, 0x8A, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x58, 0x3A, 0x00, 0x8B, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x57, 0x41, 0x18, 0x76, 0x3A, 0x00, 0x8C, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x57, 0x41, 0x10, 0x76, 0x3A, 0x00, 0x8D, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x57, 0x41, 0x08, 0x76, 0x3A, 0x00, 0x8E, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x57, 0x3A, 0x00, 0x8F, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x56, 0x41, 0x18, 0x76, 0x3A, 0x00, 0x90, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x56, 0x41, 0x10, 0x76, 0x3A, 0x00, 0x91, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x56, 0x41, 0x08, 0x76, 0x3A, 0x00, 0x92, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x56, 0x3A, 0x00, 0x93, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x55, 0x41, 0x18, 0x76, 0x3A, 0x00, 0x94, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x55, 0x41, 0x10, 0x76, 0x3A, 0x00, 0x95, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x55, 0x41, 0x08, 0x76, 0x3A, 0x00, 0x96, 0x80, 0x80, 0x08, 0x20, 0x00, 0x20, 0x55, 0x3A, 0x00, 0x97, 0x80, 0x80, 0x08, 0x0B]);
    /*
    var res = [];
    for (var i = 0; i < wasmBytes.length; i += 4)
    {
        res.push(wasmBytes[i+3] << 24 | wasmBytes[i+2] << 16 | wasmBytes[i+1] << 8 | wasmBytes[i]);
    }
    console.log(res.join(","))
    */
    WebAssembly.instantiate(wasmBytes, importObject).then(function (obj) {
        sha1wasm_1 = obj.instance.exports.sha1;
        var memory = obj.instance.exports.memory;
        memory.grow(256);
        sharedMemoryBuffer = new Uint8Array(memory.buffer);
    });
    var emptyArray_1 = new Uint8Array(20);
    sha1func = function (bytes, blockSize) {
        var byteCount = bytes.length;
        if (byteCount < blockSize)
            sharedMemoryBuffer.set(new Uint8Array(blockSize - byteCount + 4), byteCount);
        else {
            sharedMemoryBuffer[blockSize] = 0;
            sharedMemoryBuffer[blockSize + 1] = 0;
            sharedMemoryBuffer[blockSize + 2] = 0;
            sharedMemoryBuffer[blockSize + 3] = 0;
        }
        sharedMemoryBuffer.set(bytes, 0);
        sharedMemoryBuffer[16777216] = byteCount >> 24;
        sharedMemoryBuffer[16777217] = (byteCount >> 16) & 0xff;
        sharedMemoryBuffer[16777218] = (byteCount >> 8) & 0xff;
        sharedMemoryBuffer[16777219] = byteCount & 0xff;
        sha1wasm_1(0);
        var ret = sharedMemoryBuffer.slice(16777220, 16777240);
        sharedMemoryBuffer.set(emptyArray_1, 16777220);
        return ret;
    };
}
else {
    sha1func = sha1_unrolled;
}
// sha1
function sha1_unrolled(inputBytes) {
    function convert_hex(val) {
        var bytes = [];
        for (var i_1 = 3; i_1 >= 0; --i_1)
            bytes.push((val >>> i_1 * 8) & 0xff);
        return bytes;
    }
    ;
    var i;
    var W = new Uint32Array(80);
    var H0 = 0x67452301;
    var H1 = 0xEFCDAB89;
    var H2 = 0x98BADCFE;
    var H3 = 0x10325476;
    var H4 = 0xC3D2E1F0;
    var A, B, C, D, E;
    var inputLength = inputBytes.length;
    var padCount = 14 - (((inputLength >> 2) + 1) & 15);
    if (padCount < 0)
        padCount += 16;
    var totalSize = (inputLength >> 2) + 1 + padCount + 2;
    var wordArray = new Uint32Array(totalSize);
    var wordArrayIndex = 0;
    for (i = 0; i < inputLength - 3; i += 4) {
        var j = inputBytes[i] << 24 | inputBytes[i + 1] << 16 | inputBytes[i + 2] << 8 | inputBytes[i + 3];
        wordArray[wordArrayIndex++] = j;
    }
    switch (inputLength & 3) {
        case 0:
            i = 0x080000000;
            break;
        case 1:
            i = inputBytes[inputLength - 1] << 24 | 0x0800000;
            break;
        case 2:
            i = inputBytes[inputLength - 2] << 24 | inputBytes[inputLength - 1] << 16 | 0x08000;
            break;
        case 3:
            i = inputBytes[inputLength - 3] << 24 | inputBytes[inputLength - 2] << 16 | inputBytes[inputLength - 1] << 8 | 0x80;
            break;
    }
    wordArray[wordArrayIndex++] = i;
    while ((wordArrayIndex & 15) !== 14)
        wordArray[wordArrayIndex++] = 0;
    wordArray[wordArrayIndex++] = inputLength >>> 29;
    wordArray[wordArrayIndex++] = (inputLength << 3) & 0x0ffffffff;
    for (var blockstart = 0; blockstart < wordArray.length; blockstart += 16) {
        W[0] = wordArray[blockstart];
        W[1] = wordArray[blockstart + 1];
        W[2] = wordArray[blockstart + 2];
        W[3] = wordArray[blockstart + 3];
        W[4] = wordArray[blockstart + 4];
        W[5] = wordArray[blockstart + 5];
        W[6] = wordArray[blockstart + 6];
        W[7] = wordArray[blockstart + 7];
        W[8] = wordArray[blockstart + 8];
        W[9] = wordArray[blockstart + 9];
        W[10] = wordArray[blockstart + 10];
        W[11] = wordArray[blockstart + 11];
        W[12] = wordArray[blockstart + 12];
        W[13] = wordArray[blockstart + 13];
        W[14] = wordArray[blockstart + 14];
        W[15] = wordArray[blockstart + 15];
        var n = void 0, temp = void 0;
        n = W[13] ^ W[8] ^ W[2] ^ W[0];
        W[16] = ((n << 1) | (n >>> 31));
        n = W[14] ^ W[9] ^ W[3] ^ W[1];
        W[17] = ((n << 1) | (n >>> 31));
        n = W[15] ^ W[10] ^ W[4] ^ W[2];
        W[18] = ((n << 1) | (n >>> 31));
        n = W[16] ^ W[11] ^ W[5] ^ W[3];
        W[19] = ((n << 1) | (n >>> 31));
        n = W[17] ^ W[12] ^ W[6] ^ W[4];
        W[20] = ((n << 1) | (n >>> 31));
        n = W[18] ^ W[13] ^ W[7] ^ W[5];
        W[21] = ((n << 1) | (n >>> 31));
        n = W[19] ^ W[14] ^ W[8] ^ W[6];
        W[22] = ((n << 1) | (n >>> 31));
        n = W[20] ^ W[15] ^ W[9] ^ W[7];
        W[23] = ((n << 1) | (n >>> 31));
        n = W[21] ^ W[16] ^ W[10] ^ W[8];
        W[24] = ((n << 1) | (n >>> 31));
        n = W[22] ^ W[17] ^ W[11] ^ W[9];
        W[25] = ((n << 1) | (n >>> 31));
        n = W[23] ^ W[18] ^ W[12] ^ W[10];
        W[26] = ((n << 1) | (n >>> 31));
        n = W[24] ^ W[19] ^ W[13] ^ W[11];
        W[27] = ((n << 1) | (n >>> 31));
        n = W[25] ^ W[20] ^ W[14] ^ W[12];
        W[28] = ((n << 1) | (n >>> 31));
        n = W[26] ^ W[21] ^ W[15] ^ W[13];
        W[29] = ((n << 1) | (n >>> 31));
        n = W[27] ^ W[22] ^ W[16] ^ W[14];
        W[30] = ((n << 1) | (n >>> 31));
        n = W[28] ^ W[23] ^ W[17] ^ W[15];
        W[31] = ((n << 1) | (n >>> 31));
        n = W[29] ^ W[24] ^ W[18] ^ W[16];
        W[32] = ((n << 1) | (n >>> 31));
        n = W[30] ^ W[25] ^ W[19] ^ W[17];
        W[33] = ((n << 1) | (n >>> 31));
        n = W[31] ^ W[26] ^ W[20] ^ W[18];
        W[34] = ((n << 1) | (n >>> 31));
        n = W[32] ^ W[27] ^ W[21] ^ W[19];
        W[35] = ((n << 1) | (n >>> 31));
        n = W[33] ^ W[28] ^ W[22] ^ W[20];
        W[36] = ((n << 1) | (n >>> 31));
        n = W[34] ^ W[29] ^ W[23] ^ W[21];
        W[37] = ((n << 1) | (n >>> 31));
        n = W[35] ^ W[30] ^ W[24] ^ W[22];
        W[38] = ((n << 1) | (n >>> 31));
        n = W[36] ^ W[31] ^ W[25] ^ W[23];
        W[39] = ((n << 1) | (n >>> 31));
        n = W[37] ^ W[32] ^ W[26] ^ W[24];
        W[40] = ((n << 1) | (n >>> 31));
        n = W[38] ^ W[33] ^ W[27] ^ W[25];
        W[41] = ((n << 1) | (n >>> 31));
        n = W[39] ^ W[34] ^ W[28] ^ W[26];
        W[42] = ((n << 1) | (n >>> 31));
        n = W[40] ^ W[35] ^ W[29] ^ W[27];
        W[43] = ((n << 1) | (n >>> 31));
        n = W[41] ^ W[36] ^ W[30] ^ W[28];
        W[44] = ((n << 1) | (n >>> 31));
        n = W[42] ^ W[37] ^ W[31] ^ W[29];
        W[45] = ((n << 1) | (n >>> 31));
        n = W[43] ^ W[38] ^ W[32] ^ W[30];
        W[46] = ((n << 1) | (n >>> 31));
        n = W[44] ^ W[39] ^ W[33] ^ W[31];
        W[47] = ((n << 1) | (n >>> 31));
        n = W[45] ^ W[40] ^ W[34] ^ W[32];
        W[48] = ((n << 1) | (n >>> 31));
        n = W[46] ^ W[41] ^ W[35] ^ W[33];
        W[49] = ((n << 1) | (n >>> 31));
        n = W[47] ^ W[42] ^ W[36] ^ W[34];
        W[50] = ((n << 1) | (n >>> 31));
        n = W[48] ^ W[43] ^ W[37] ^ W[35];
        W[51] = ((n << 1) | (n >>> 31));
        n = W[49] ^ W[44] ^ W[38] ^ W[36];
        W[52] = ((n << 1) | (n >>> 31));
        n = W[50] ^ W[45] ^ W[39] ^ W[37];
        W[53] = ((n << 1) | (n >>> 31));
        n = W[51] ^ W[46] ^ W[40] ^ W[38];
        W[54] = ((n << 1) | (n >>> 31));
        n = W[52] ^ W[47] ^ W[41] ^ W[39];
        W[55] = ((n << 1) | (n >>> 31));
        n = W[53] ^ W[48] ^ W[42] ^ W[40];
        W[56] = ((n << 1) | (n >>> 31));
        n = W[54] ^ W[49] ^ W[43] ^ W[41];
        W[57] = ((n << 1) | (n >>> 31));
        n = W[55] ^ W[50] ^ W[44] ^ W[42];
        W[58] = ((n << 1) | (n >>> 31));
        n = W[56] ^ W[51] ^ W[45] ^ W[43];
        W[59] = ((n << 1) | (n >>> 31));
        n = W[57] ^ W[52] ^ W[46] ^ W[44];
        W[60] = ((n << 1) | (n >>> 31));
        n = W[58] ^ W[53] ^ W[47] ^ W[45];
        W[61] = ((n << 1) | (n >>> 31));
        n = W[59] ^ W[54] ^ W[48] ^ W[46];
        W[62] = ((n << 1) | (n >>> 31));
        n = W[60] ^ W[55] ^ W[49] ^ W[47];
        W[63] = ((n << 1) | (n >>> 31));
        n = W[61] ^ W[56] ^ W[50] ^ W[48];
        W[64] = ((n << 1) | (n >>> 31));
        n = W[62] ^ W[57] ^ W[51] ^ W[49];
        W[65] = ((n << 1) | (n >>> 31));
        n = W[63] ^ W[58] ^ W[52] ^ W[50];
        W[66] = ((n << 1) | (n >>> 31));
        n = W[64] ^ W[59] ^ W[53] ^ W[51];
        W[67] = ((n << 1) | (n >>> 31));
        n = W[65] ^ W[60] ^ W[54] ^ W[52];
        W[68] = ((n << 1) | (n >>> 31));
        n = W[66] ^ W[61] ^ W[55] ^ W[53];
        W[69] = ((n << 1) | (n >>> 31));
        n = W[67] ^ W[62] ^ W[56] ^ W[54];
        W[70] = ((n << 1) | (n >>> 31));
        n = W[68] ^ W[63] ^ W[57] ^ W[55];
        W[71] = ((n << 1) | (n >>> 31));
        n = W[69] ^ W[64] ^ W[58] ^ W[56];
        W[72] = ((n << 1) | (n >>> 31));
        n = W[70] ^ W[65] ^ W[59] ^ W[57];
        W[73] = ((n << 1) | (n >>> 31));
        n = W[71] ^ W[66] ^ W[60] ^ W[58];
        W[74] = ((n << 1) | (n >>> 31));
        n = W[72] ^ W[67] ^ W[61] ^ W[59];
        W[75] = ((n << 1) | (n >>> 31));
        n = W[73] ^ W[68] ^ W[62] ^ W[60];
        W[76] = ((n << 1) | (n >>> 31));
        n = W[74] ^ W[69] ^ W[63] ^ W[61];
        W[77] = ((n << 1) | (n >>> 31));
        n = W[75] ^ W[70] ^ W[64] ^ W[62];
        W[78] = ((n << 1) | (n >>> 31));
        n = W[76] ^ W[71] ^ W[65] ^ W[63];
        W[79] = ((n << 1) | (n >>> 31));
        A = H0;
        B = H1;
        C = H2;
        D = H3;
        E = H4;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[0] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[1] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[2] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[3] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[4] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[5] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[6] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[7] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[8] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[9] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[10] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[11] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[12] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[13] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[14] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[15] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[16] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[17] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[18] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (~B & D)) + E + W[19] + 0x5A827999) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[20] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[21] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[22] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[23] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[24] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[25] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[26] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[27] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[28] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[29] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[30] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[31] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[32] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[33] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[34] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[35] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[36] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[37] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[38] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[39] + 0x6ED9EBA1) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[40] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[41] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[42] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[43] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[44] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[45] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[46] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[47] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[48] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[49] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[50] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[51] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[52] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[53] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[54] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[55] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[56] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[57] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[58] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + ((B & C) | (B & D) | (C & D)) + E + W[59] + 0x8F1BBCDC) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[60] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[61] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[62] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[63] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[64] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[65] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[66] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[67] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[68] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[69] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[70] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[71] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[72] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[73] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[74] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[75] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[76] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[77] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[78] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        temp = (((A << 5) | (A >>> 27)) + (B ^ C ^ D) + E + W[79] + 0xCA62C1D6) & 0x0ffffffff;
        E = D;
        D = C;
        C = (B << 30) | (B >>> 2);
        B = A;
        A = temp;
        H0 = (H0 + A) & 0x0ffffffff;
        H1 = (H1 + B) & 0x0ffffffff;
        H2 = (H2 + C) & 0x0ffffffff;
        H3 = (H3 + D) & 0x0ffffffff;
        H4 = (H4 + E) & 0x0ffffffff;
    }
    return new Uint8Array(convert_hex(H0).concat(convert_hex(H1), convert_hex(H2), convert_hex(H3), convert_hex(H4)));
}
function PostMessage(message, transfer) {
    // hack for typescript without web worker lib
    postMessage(message, transfer);
}
function ProcessSha1Data(data) {
    var array = data.data;
    var blockSize = data.blockSize;
    var maxSize = data.readChunkSize;
    var remainingBytes = Math.min(maxSize, array.length);
    var blockCount = Math.ceil(remainingBytes / blockSize);
    var result = new Uint8Array(20 * blockCount); // 20 bytes per sha1
    for (var idx = 0, i = 0; remainingBytes > 0; idx += blockSize, ++i) {
        var current = sha1func(array.subarray(idx, idx + Math.min(blockSize, remainingBytes)), blockSize);
        remainingBytes -= blockSize;
        result.set(current, 20 * i);
    }
    return result;
}
onmessage = function (ev) {
    var result = ProcessSha1Data(ev.data);
    PostMessage(result, [result.buffer]);
};
